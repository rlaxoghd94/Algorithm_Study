"""Nic's approach

find the minimum index of characters that only appear once using collections.Counter

"""
from collections import Counter
from typing import Optional

data = ""

class Solution:
    def firstUniqChar(self, s: str) -> int:
        if not s:
            return -1
        
        unique_char_list = self.fetch_unique_characters(s)
        if not unique_char_list:
            return -1
        
        min_index = self.find_min_index(s, unique_char_list)

        return min_index

    def fetch_unique_characters(self, s:str) -> Optional[list]:
        char_counter = Counter(s)

        unique_characters = []
        for item in char_counter:
            if char_counter[item] == 1:
                unique_characters.append(item)
        
        if not unique_characters:
            return None
        
        return unique_characters
    
    def find_min_index(self, s:str, unique_char_list: list) -> int:
        index = 105
        
        for single_char in unique_char_list:
            index = min(index, s.index(single_char))
        
        return index


def firstUniqChar(s: str) -> int:
    if not s:
        return -1
    
    unique_char_list = fetch_unique_characters(s)
    if not unique_char_list:
        return -1
    
    min_index = find_min_index(s, unique_char_list)

    return min_index

def fetch_unique_characters(s:str) -> Optional[list]:
    char_counter = Counter(s)

    unique_characters = []
    for item in char_counter:
        if char_counter[item] == 1:
            unique_characters.append(item)
    
    if not unique_characters:
        return None
    
    return unique_characters

def find_min_index(s:str, unique_char_list: list) -> int:
    index = 10 ** 5
    
    for single_char in unique_char_list:
        index = min(index, s.index(single_char))
    
    return index

if __name__ == '__main__':
    print(firstUniqChar(s=data))